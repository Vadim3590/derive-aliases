//! Documentation for Derive Aliases @generated by the `derive_aliases` crate
//!
//! Derive aliases are defined in `derive_aliases.rs`, in the same directory
//! as the crate's `Cargo.toml`
#![allow(warnings)]
#![doc(hidden)]

/// Derive alias `..Copy` can be used like this:
///
/// ```ignore
/// #[derive(..Copy)]
/// struct Example;
/// ```
///
/// Which expands to the following:
///
/// ```ignore
/// #[cfg_attr(
///     feature= "arbitrary" ,
///     derive(Clone, Copy)
/// )]
/// struct Example;
/// ```
pub trait Copy {}

/// Derive alias `..Eq` can be used like this:
///
/// ```ignore
/// #[derive(..Eq)]
/// struct Example;
/// ```
///
/// Which expands to the following:
///
/// ```ignore
/// #[cfg_attr(
///     feature= "arbitrary" ,
///     derive(Eq, PartialEq)
/// )]
/// struct Example;
/// ```
pub trait Eq {}

/// Derive alias `..Ord` can be used like this:
///
/// ```ignore
/// #[derive(..Ord)]
/// struct Example;
/// ```
///
/// Which expands to the following:
///
/// ```ignore
/// #[cfg_attr(
///     all(
///         all(feature= "serde", feature = "smallvec") ,
///         all(feature= "smallvec", feature = "smallvec", all(feature = "smallvec"), feature = "smallvec") ,
///         feature= "arbitrary" ,
///         feature= "serde" 
///     ),
///     derive(Eq, PartialEq)
/// )]
/// #[cfg_attr(
///     all(
///         all(feature= "serde", feature = "smallvec") ,
///         all(feature= "smallvec", feature = "smallvec", all(feature = "smallvec"), feature = "smallvec") 
///     ),
///     derive(Ord)
/// )]
/// #[cfg_attr(
///     all(feature= "smallvec", feature = "smallvec", all(feature = "smallvec"), feature = "smallvec") ,
///     derive(PartialOrd)
/// )]
/// struct Example;
/// ```
pub trait Ord {}

/// Derive alias `..Together` can be used like this:
///
/// ```ignore
/// #[derive(..Together)]
/// struct Example;
/// ```
///
/// Which expands to the following:
///
/// ```ignore
/// #[cfg_attr(
///     feature= "serde" ,
///     derive(PartialOrd, std::hash::Hash)
/// )]
/// struct Example;
/// ```
pub trait Together {}
